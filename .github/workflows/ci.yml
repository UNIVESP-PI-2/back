name: Continuous Integration
run-name: ${{ github.actor }} executando CI da branch ${{ github.ref_name }}

on:
  push:
    branches: 
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  validation:
    name: Valida Ambiente da Acions
    runs-on: ubuntu-latest

    steps:
      - name: Configuração do ambiente
        run: echo "Configurações do actions..."
      
      - name: Verficando Rede
        run: echo "Verificando conexão..."

  build:
    name: Faz build do projeto
    runs-on: ubuntu-latest
    needs: validation

    steps:
      - name: Clonando o repositório
        run: echo "Clonando o repositório..."

      - name: Verificanção do NodeJS
        run: echo "Instalar o NodeJS, e ver a versão..."

      - name: Instala depências do projeto
        run: echo "npm install"

      - name: Build do projeto
        run: echo "npm build"

  test-unid:
    name: Testes de unidade
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Rodando testes de unidade
        run: echo "Ainda não foi implementado nenhum teste de unidade."

  test-integration:
    name: Testes de Integração
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Rodando testes de integração
        run: echo "Ainda não foi implementado nenhum teste de integração."

  deploy-homologacao:
    name: Deploy no ambiente de homologação
    runs-on: ubuntu-latest
    needs: [test-unid, test-integration]

    steps:
      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_SECRET_KEY }}

      - name: Deploy via SSH
        run: |
          ssh -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no ${{ secrets.SSH_NAME_USER }}@${{ secrets.SSH_HOST }} bash << EOF
            set -e


            REPO="${{ github.repository }}"
            COMMIT_HASH="${GITHUB_SHA:0:7}"
            PROJECT_DIR="/home/deploy/homologacao/\$COMMIT_HASH"

            if [ -d "\$PROJECT_DIR" ]; then
              echo "Removendo diretório antigo..."
              rm -rf "\$PROJECT_DIR"
            fi

            echo "Clonando repositório..."
            git clone "https://github.com/\$REPO.git" "\$PROJECT_DIR"
            cd "\$PROJECT_DIR"
            git checkout "${{ github.ref_name }}"
            cd .docker

            echo "Parando containers antigos..."
            docker compose -f development-compose.yml -p backend down || true

            echo "Criando arquivo de configuração..."
            echo "APP_PORT=${{ secrets.ENV_HOMO_APP_PORT }}" > ../.env
            echo "DB_DRIVER=${{ secrets.ENV_HOMO_DB_DRIVER }}" >> ../.env
            echo "DB_USER=${{ secrets.ENV_HOMO_DB_USER }}" >> ../.env
            echo "DB_PORT=${{ secrets.ENV_HOMO_DB_PORT }}" >> ../.env
            echo "DB_PASS=${{ secrets.ENV_HOMO_DB_PASS }}" >> ../.env
            echo "DB_URI=${{ secrets.ENV_HOMO_DB_URI }}" >> ../.env

            echo "Subindo containers..."
            docker compose -f development-compose.yml -p backend --env-file ../.env up -d --build

            echo "Verificando status..."
            docker ps --filter "name=backend"
          EOF

  resume:
    name: Resumo do CI
    runs-on: ubuntu-latest
    needs: deploy-homologacao

    steps:
      - name: Resumo da pipeline CI
        run: echo "Resumindo..."
