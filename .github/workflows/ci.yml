name: CI - Backend
run-name: ${{ github.actor }} executando CI da branch ${{ github.ref_name }}

on:
  push:
    branches: 
      - '**'
  pull_request:
    branches:
      - '**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: univesp-pi-2/backend

jobs:
  build-and-test:
    name: Build, Test e Push de Imagem
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Instalar dependências
        run: npm ci

      - name: Lint
        run: npm run lint 2>/dev/null || echo "Lint não configurado"

      - name: Build do projeto
        run: npm run build

      # Testes (quando implementados)
      - name: Testes de unidade
        run: npm test 2>/dev/null || echo "Testes não configurados"

      - name: Gerar tags da imagem
        id: meta
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          COMMIT_HASH="${{ github.sha }}"
          COMMIT_SHORT="${COMMIT_HASH:0:7}"
          
          if [[ "$BRANCH_NAME" == "main" ]]; then
            echo "TAGS=latest,$COMMIT_SHORT" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH_NAME" == "homo" ]]; then
            echo "TAGS=homo-latest,homo-$COMMIT_SHORT" >> $GITHUB_OUTPUT
          else
            echo "TAGS=$COMMIT_SHORT" >> $GITHUB_OUTPUT
          fi
          
          echo "DEBUG_FLAG=false" >> $GITHUB_OUTPUT
          if [[ "$BRANCH_NAME" == "homo" ]]; then
            echo "DEBUG_FLAG=true" >> $GITHUB_OUTPUT
          fi

      # Push apenas para branches main e homo
      - name: Login no GitHub Container Registry
        if: github.ref_name == 'main' || github.ref_name == 'homo'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        if: github.ref_name == 'main' || github.ref_name == 'homo'
        uses: docker/setup-buildx-action@v3

      - name: Build e Push da imagem Docker
        if: github.ref_name == 'main' || github.ref_name == 'homo'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./.docker/Dockerfile.prod
          build-args: |
            DEBUG=${{ steps.meta.outputs.DEBUG_FLAG }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.TAGS }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

      # Push de tag de versão (v1.2.3)
      - name: Extrair versão da tag
        if: startsWith(github.ref, 'refs/tags/v')
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Login no GHCR (para tag de versão)
        if: startsWith(github.ref, 'refs/tags/v')
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build e Push da imagem Docker (tag de versão)
        if: startsWith(github.ref, 'refs/tags/v')
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./.docker/Dockerfile.prod
          build-args: |
            DEBUG=false
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

      - name: Output de resumo
        run: |
          echo "## CI Backend - Resumo" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tags da Imagem**: ${{ steps.meta.outputs.TAGS }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
